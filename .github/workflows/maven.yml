# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Pull Code from GitHub
      uses: actions/checkout@v3

    - name: Install Java 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build Java App (Maven)
      run: mvn clean package 

    - name: Find JAR File
      run: |
        echo "JAR_FILE=$(find target -name '*.jar' | head -n 1)" >> $GITHUB_ENV

    - name: Save EC2 PEM Key
      run: |
        echo "${{ secrets.EC2_KEY }}" > key.pem
        chmod 400 key.pem

    - name: Send JAR to EC2
      run: |
        scp -i key.pem -o StrictHostKeyChecking=no $JAR_FILE ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/Demo/Updated/app.jar


    # RUN SERVICES
    - name: SSH and deploy only updated services
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_KEY }}
        script: |
          cd ~/Demo
          mkdir -p Backup

          echo "Listing JARs in Updated/"
          ls -l Updated || echo "No JARs found"

          for filepath in Updated/*.jar; do
            [ -e "$filepath" ] || continue

            filename=$(basename "$filepath")
            servicename="${filename%.jar}"
            fulljar="~/Demo/${filename}"

            echo "Restarting service: $servicename"

            pid=$(pgrep -f "$fulljar")
            if [ -n "$pid" ]; then
              echo "Stopping $servicename (PID: $pid)"
              kill "$pid"
              sleep 2
            fi

            if [ -f "$filename" ]; then
              echo "Backing up old ${filename}"
              mv "$filename" "Backup/${servicename}.jar"
            fi

            echo "Moving updated jar to microservices root"
            mv "Updated/${filename}" "${filename}"

            echo "Starting ${filename}"
            nohup java -jar "${filename}" > "${servicename}.log" 2>&1 &

            echo "$servicename restarted"
          done

          echo "ðŸ§¹ Cleaning Updated folder"
          rm -rf Updated/*
