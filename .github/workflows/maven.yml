name: Deploy Dockerized App to EC2

on:
  push:
    branches:
      - master  

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

    - name: Build, tag, and push Docker image to ECR
      run: |
        IMAGE_TAG=latest
        docker build -t ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .
        docker push ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user  # or ubuntu based on your AMI
        key: ${{ secrets.EC2_KEY }}
        script: |
          echo "Logging into ECR"
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
            docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

          echo "Stopping and removing old container"
          docker stop myapp || true
          docker rm myapp || true

          echo "Pulling new image"
          docker pull ${{ secrets.ECR_REPOSITORY }}:latest

          echo "Running new container"
          docker run -d --name myapp -p 80:8080 ${{ secrets.ECR_REPOSITORY }}:latest
