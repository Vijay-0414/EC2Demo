name: Deploy Dockerized App to ECS

on:
  push:
    branches:
      - master  

env:
  CLUSTER_NAME: demo-cluster
  SERVICE_NAME: demo-service
  TASK_DEF_FAMILY: demo-task
  CONTAINER_NAME: demo-container
  IMAGE_TAG: latest
  
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set short git commit SHA
      id: vars
      run: |
        calculatedSha=$(git rev-parse --short ${{ github.sha }})
        echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV

    - name: Github Workspace
      run: echo ${{ github.workspace }}

    - name: Confirm git commit SHA output
      run: echo ${{ env.COMMIT_SHORT_SHA }}
        
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build JAR with Maven
      run: mvn clean package -DskipTests

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

    - name: Build, tag, and push Docker image to ECR
      run: |
        docker build -t ${{ secrets.ECR_REPOSITORY }}:${{ env.COMMIT_SHORT_SHA }}:${{IMAGE_TAG}} .
        docker push ${{ secrets.ECR_REPOSITORY }}:${{ env.COMMIT_SHORT_SHA }}:${{IMAGE_TAG}}

    - name: Create ECS cluster if not exists
      run: |
        CLUSTER_EXISTS=$(aws ecs describe-clusters --clusters $CLUSTER_NAME \
        --query "clusters[0].status" --output text 2>/dev/null || echo "MISSING")

        if [ "$CLUSTER_EXISTS" = "MISSING" ] || [ "$CLUSTER_EXISTS" = "INACTIVE" ]; then
          echo "$CLUSTER_NAME Cluster not found. Creating $CLUSTER_NAME ECS cluster..."
          aws ecs create-cluster --cluster-name $CLUSTER_NAME
        else
          echo "ECS cluster '$CLUSTER_NAME' already exists."
        fi

    - name: Launch EC2 instances if none exist
      run: |
        COUNT=$(aws ecs list-container-instances --cluster $CLUSTER_NAME \
          --query "length(containerInstanceArns)" --output text)
        if [ "$COUNT" -eq 0 ]; then
          echo "Launching EC2 container instance..."
          AMI_ID=$(aws ssm get-parameters \
            --names /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id \
            --query "Parameters[0].Value" --output text)
          aws ec2 run-instances \
            --image-id $AMI_ID \
            --count 1 \
            --instance-type t3.micro \
            --iam-instance-profile Name=ecsInstanceRole \
            --key-name my-key \
            --security-group-ids sg-0abb4251606ddb157 \
            --subnet-id subnet-02cad20bf83afac11 \
            --user-data "#!/bin/bash
            echo ECS_CLUSTER=$CLUSTER_NAME >> /etc/ecs/ecs.config"
        else
          echo "EC2 container instances already running."
        fi

    - name: Update task definition with image
      run: |
        IMAGE_URI="${{ secrets.ECR_REPOSITORY }}:${{ env.COMMIT_SHORT_SHA }}:${{IMAGE_TAG}}"
        sed -i "s|REPLACE_ME|$IMAGE_URI:latest|g" ecs-task-def.json > final-task-def.json

    - name: Register ECS task definition
      run: |
        TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://final-task-def.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        if [ -z "$TASK_DEF_ARN" ]; then
          echo "Task definition registration failed."
          exit 1
        fi
        echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

    - name: Create or update ECS service
      run: |
        STATUS=$(aws ecs describe-services \
          --cluster $CLUSTER_NAME \
          --services $SERVICE_NAME \
          --query "services[0].status" \
          --output text 2>/dev/null || echo "MISSING")

        if [ "$STATUS" == "ACTIVE" ]; then
          echo "Updating ECS service..."
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $TASK_DEF_ARN \
            --force-new-deployment
        else
          echo "Creating ECS service..."
          aws ecs create-service \
            --cluster $CLUSTER_NAME \
            --service-name $SERVICE_NAME \
            --task-definition $TASK_DEF_ARN \
            --desired-count 1 \
            --launch-type EC2 \
            --deployment-configuration maximumPercent=200,minimumHealthyPercent=50
        fi
