name: Deploy Dockerized App to ECS

on:
  push:
    branches:
      - master  

env:
  CLUSTER_NAME: demo-cluster
  SERVICE_NAME: demo-service
  TASK_DEF_FAMILY: demo-task
  CONTAINER_NAME: demo-container
  
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set short git commit SHA
      id: vars
      run: |
        calculatedSha=$(git rev-parse --short ${{ github.sha }})
        echo "COMMIT_SHORT_SHA=$calculatedSha" >> $GITHUB_ENV

    - name: Github Workspace
      run: echo ${{ github.workspace }}

    - name: Confirm git commit SHA output
      run: echo ${{ env.COMMIT_SHORT_SHA }}
        
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build JAR with Maven
      run: mvn clean package -DskipTests

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

    - name: Build, tag, and push Docker image to ECR
      run: |
        docker build -t ${{ secrets.ECR_REPOSITORY }}:${{ env.COMMIT_SHORT_SHA }} .
        docker push ${{ secrets.ECR_REPOSITORY }}:${{ env.COMMIT_SHORT_SHA }}

    - name: Create ECS cluster if not exists
      run: |
        CLUSTER_EXISTS=$(aws ecs describe-clusters --clusters $CLUSTER_NAME \
        --query "clusters[0].status" --output text 2>/dev/null || echo "MISSING")

        if [ "$CLUSTER_EXISTS" = "MISSING" ] || [ "$CLUSTER_EXISTS" = "INACTIVE" ]; then
          echo "$CLUSTER_NAME Cluster not found. Creating $CLUSTER_NAME ECS cluster..."
          aws ecs create-cluster --cluster-name $CLUSTER_NAME
        else
          echo "ECS cluster '$CLUSTER_NAME' already exists."
        fi

    - name: Prepare updated task definition
      id: task-def
      run: |
        IMAGE_URI="${{ secrets.ECR_REPOSITORY }}:${{ env.COMMIT_SHORT_SHA }}"
        sed "s|REPLACE_ME|$IMAGE_URI|g" ecs-task-def.json > final-task-def.json

    - name: Register new task definition
      run: |
        TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://final-task-def.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
